import { useState, useEffect } from 'react'
import { User } from '../../../App'
import './ChildrenReports.css'
import serverUrl from '../../server'

interface ChildrenReportsProps {
  user: User
  onBack: () => void
}

interface ChildReport {
  id: number
  dr_id: number
  name: string
  gender: '‡§™‡•Å‡§∞‡•Å‡§∑' | '‡§Æ‡§π‡§ø‡§≤‡§æ'
  fatherName: string
  mobileNo: string
  schoolName: string
  haveAadhar: 'yes' | 'no'
  haveShramik: 'yes' | 'no'
  aadharPhoto: string | null
  shramikPhoto: string | null
  heartStatus: '‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß' | '‡§∏‡§Ç‡§¶‡•á‡§π ‡§®‡§π‡•Ä‡§Ç'
  notes: string | null
  // Legacy fields for compatibility
  childName: string
  motherName: string
  age: number
  mobileNumber: string
  address: string
  aadharAvailable: boolean
  shramikCardAvailable: boolean
  symptoms: string[]
  diseaseFound: boolean
  screeningDate: string
  doctorName: string
  weight: number
  height: number
  heartRate: number
  bloodPressure: string
  healthStatus: '‡§∏‡•ç‡§µ‡§∏‡•ç‡§•' | '‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø' | '‡§ú‡§æ‡§Ç‡§ö ‡§Æ‡•á‡§Ç'
}

const ChildrenReports = ({ user, onBack }: ChildrenReportsProps) => {
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('')
  const [filterDoctor, setFilterDoctor] = useState('')
  const [selectedChild, setSelectedChild] = useState<ChildReport | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [reports, setReports] = useState<ChildReport[]>([])
  const [doctors, setDoctors] = useState<{ doctorId: number; doctorName: string; hospitalName: string; totalScreenings: number }[]>([])
  const [stats, setStats] = useState({
    totalChildren: 0,
    normalCases: 0,
    suspiciousCases: 0,
    totalDoctors: 0,
    totalSchools: 0
  })
  const [pagination, setPagination] = useState({
    currentPage: 1,
    totalPages: 1,
    totalRecords: 0
  })
  const [isLoading, setIsLoading] = useState(true)
  const itemsPerPage = 10

  // ESC key functionality for going back
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && !selectedChild) {
        onBack()
      }
    }
    
    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [onBack, selectedChild])

  // Fetch reports data and stats
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true)
        
        // Fetch reports
        const reportsResponse = await fetch(`${serverUrl}children_reports.php?action=getReports&page=${currentPage}&limit=${itemsPerPage}&search=${searchTerm}&heartStatus=${filterStatus}&doctorId=${filterDoctor}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
          credentials: 'omit'
        })
        
        if (reportsResponse.ok) {
          const reportsData = await reportsResponse.json()
          if (reportsData.success) {
            setReports(reportsData.data || [])
            setPagination(reportsData.pagination || {
              currentPage: 1,
              totalPages: 1,
              totalRecords: 0
            })
          }
        }

        // Fetch stats
        const statsResponse = await fetch(`${serverUrl}children_reports.php?action=getStats`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
          credentials: 'omit'
        })
        
        if (statsResponse.ok) {
          const statsData = await statsResponse.json()
          if (statsData.success) {
            setStats(statsData.stats || {
              totalChildren: 0,
              normalCases: 0,
              suspiciousCases: 0,
              totalDoctors: 0,
              totalSchools: 0
            })
            setDoctors(statsData.doctorStats || [])
          }
        }
        
      } catch (error) {
        console.error('Error fetching data:', error)
        alert('‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§')
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [currentPage, searchTerm, filterStatus, filterDoctor])

  const healthStatuses = ['‡§∏‡§Ç‡§¶‡•á‡§π ‡§®‡§π‡•Ä‡§Ç', '‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß']

  const totalPages = pagination.totalPages
  const paginatedReports = reports

  const normalCount = stats.normalCases
  const suspiciousCount = stats.suspiciousCases
  const totalCount = stats.totalChildren

  const handleViewDetails = (report: ChildReport) => {
    setSelectedChild(report)
  }

  return (
    <div className="children-reports">
      <div className="page-header">
        <div className="header-content">
          <div>
            <h1>‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü</h1>
            <p>‡§∏‡§≠‡•Ä ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§î‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ - {user.name}</p>
          </div>
        </div>
      </div>

      <div className="content-container">
        {isLoading ? (
          <div className="loading-container">
            <div className="loading-spinner">
              <h3>‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...</h3>
              <p>‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç</p>
            </div>
          </div>
        ) : (
          <>
            {/* Stats Cards */}
            <div className="stats-row">
              <div className="stat-card healthy">
                <h3>‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡§æ‡§Æ‡§≤‡•á</h3>
                <p className="stat-number">{normalCount}</p>
                <span className="stat-icon">‚úÖ</span>
              </div>
              <div className="stat-card unhealthy">
                <h3>‡§∏‡§Ç‡§¶‡§ø‡§ó‡•ç‡§ß ‡§Æ‡§æ‡§Æ‡§≤‡•á</h3>
                <p className="stat-number">{suspiciousCount}</p>
                <span className="stat-icon">‚ö†Ô∏è</span>
              </div>
              <div className="stat-card total">
                <h3>‡§ï‡•Å‡§≤ ‡§¨‡§ö‡•ç‡§ö‡•á</h3>
                <p className="stat-number">{totalCount}</p>
                <span className="stat-icon">üë∂</span>
              </div>
            </div>

        {/* Search and Filter */}
        <div className="search-filter-section">
          <div className="search-box">
            <input
              type="text"
              placeholder="‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ ‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§ñ‡•ã‡§ú‡•á‡§Ç..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <span className="search-icon">üîç</span>
          </div>
          
          <div className="filter-section">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
            >
              <option value="">‡§∏‡§≠‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç</option>
              {healthStatuses.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>

            <select
              value={filterDoctor}
              onChange={(e) => setFilterDoctor(e.target.value)}
            >
              <option value="">‡§∏‡§≠‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï</option>
              {doctors.map(doctor => (
                <option key={doctor.doctorId} value={doctor.doctorId}>
                  {doctor.doctorName} - {doctor.hospitalName}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Reports Table */}
        <div className="table-container">
          <table className="reports-table">
            <thead>
              <tr>
                <th>‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£</th>
                <th>‡§™‡§ø‡§§‡§æ</th>
                <th>‡§∏‡•ç‡§ï‡•Ç‡§≤</th>
                <th>‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ</th>
                <th>‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï</th>
                <th>‡§π‡•É‡§¶‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø</th>
                <th>‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à</th>
              </tr>
            </thead>
            <tbody>
              {paginatedReports.map(report => (
                <tr key={report.id}>
                  <td>
                    <div className="child-info">
                      <div className="child-avatar">
                        {report.gender === '‡§™‡•Å‡§∞‡•Å‡§∑' ? 'üë¶' : 'üëß'}
                      </div>
                      <div>
                        <div className="child-name">{report.childName || report.name}</div>
                        <div className="child-details">
                          {report.age} ‡§µ‡§∞‡•ç‡§∑, {report.gender}
                        </div>
                        <div className="child-contact">{report.mobileNumber || report.mobileNo}</div>
                      </div>
                    </div>
                  </td>
                  <td>
                    <div className="parent-info">
                      <div>‡§™‡§ø‡§§‡§æ: {report.fatherName}</div>
                    </div>
                  </td>
                  <td>{report.schoolName}</td>
                  <td>{report.screeningDate}</td>
                  <td>{report.doctorName}</td>
                  <td>
                    <span className={`status-badge status-${report.heartStatus === '‡§∏‡§Ç‡§¶‡•á‡§π ‡§®‡§π‡•Ä‡§Ç' ? 'healthy' : 'suspicious'}`}>
                      {report.heartStatus}
                    </span>
                  </td>
                  <td>
                    <div className="action-buttons">
                      <button 
                        className="btn-small btn-primary"
                        onClick={() => handleViewDetails(report)}
                      >
                        ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        {totalPages > 1 && (
          <div className="pagination">
            <button 
              className="pagination-btn"
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              ‚Üê ‡§™‡§ø‡§õ‡§≤‡§æ
            </button>
            
            <div className="pagination-info">
              ‡§™‡•É‡§∑‡•ç‡§† {pagination.currentPage} / {pagination.totalPages} (‡§ï‡•Å‡§≤ {pagination.totalRecords} ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü)
            </div>
            
            <button 
              className="pagination-btn"
              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
            >
              ‡§Ö‡§ó‡§≤‡§æ ‚Üí
            </button>
          </div>
        )}

        {reports.length === 0 && !isLoading && (
          <div className="no-results">
            <div className="empty-state">
              <h3>‡§ï‡•ã‡§à ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à</h3>
              <p>‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à‡•§</p>
            </div>
          </div>
        )}
          </>
        )}
      </div>

      {/* Child Detail Modal */}
      {selectedChild && (
        <div className="modal-overlay">
          <div className="modal-content large-modal">
            <div className="modal-header">
              <h3>‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü</h3>
              <button className="close-btn" onClick={() => setSelectedChild(null)}>√ó</button>
            </div>
            <div className="modal-body">
              <div className="child-detail-grid">
                <div className="detail-section">
                  <h4>‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h4>
                  <div className="detail-row">
                    <span className="label">‡§®‡§æ‡§Æ:</span>
                    <span className="value">{selectedChild.name}</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡§≤‡§ø‡§Ç‡§ó:</span>
                    <span className="value">{selectedChild.gender}</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ:</span>
                    <span className="value">{selectedChild.fatherName}</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞:</span>
                    <span className="value">{selectedChild.mobileNo}</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡§∏‡•ç‡§ï‡•Ç‡§≤:</span>
                    <span className="value">{selectedChild.schoolName}</span>
                  </div>
                </div>

                <div className="detail-section">
                  <h4>‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú ‡§∏‡•ç‡§•‡§ø‡§§‡§ø</h4>
                  <div className="detail-row">
                    <span className="label">‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°:</span>
                    <span className={`value ${selectedChild.haveAadhar === 'yes' ? 'available' : 'not-available'}`}>
                      {selectedChild.haveAadhar === 'yes' ? '‡§π‡§æ‡§Ç' : '‡§®‡§π‡•Ä‡§Ç'}
                    </span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§°:</span>
                    <span className={`value ${selectedChild.haveShramik === 'yes' ? 'available' : 'not-available'}`}>
                      {selectedChild.haveShramik === 'yes' ? '‡§π‡§æ‡§Ç' : '‡§®‡§π‡•Ä‡§Ç'}
                    </span>
                  </div>
                  {selectedChild.aadharPhoto && (
                    <div className="detail-row">
                      <span className="label">‡§Ü‡§ß‡§æ‡§∞ ‡§´‡•ã‡§ü‡•ã:</span>
                      <span className="value">‡§â‡§™‡§≤‡§¨‡•ç‡§ß</span>
                    </div>
                  )}
                  {selectedChild.shramikPhoto && (
                    <div className="detail-row">
                      <span className="label">‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï ‡§´‡•ã‡§ü‡•ã:</span>
                      <span className="value">‡§â‡§™‡§≤‡§¨‡•ç‡§ß</span>
                    </div>
                  )}
                </div>

                <div className="detail-section">
                  <h4>‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h4>
                  <div className="detail-row">
                    <span className="label">‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ID:</span>
                    <span className="value">{selectedChild.dr_id}</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡§π‡•É‡§¶‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø:</span>
                    <span className={`value status-${selectedChild.heartStatus === '‡§∏‡§Ç‡§¶‡•á‡§π ‡§®‡§π‡•Ä‡§Ç' ? 'healthy' : 'suspicious'}`}>
                      {selectedChild.heartStatus}
                    </span>
                  </div>
                  {selectedChild.notes && (
                    <div className="detail-row full-width">
                      <span className="label">‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä:</span>
                      <span className="value">{selectedChild.notes}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button className="btn-secondary" onClick={() => setSelectedChild(null)}>
                ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default ChildrenReports
