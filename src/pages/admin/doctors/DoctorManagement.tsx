import { useState, useEffect } from 'react'
import { User } from '../../../App'
import './DoctorManagement.css'

interface DoctorManagementProps {
  user: User
  onBack: () => void
}

interface Doctor {
  id: number
  doctorName: string
  hospitalType: string
  hospitalname: string
  phoneNo: string
  experience: number
  email: string
  password: string
  createdAt: string
  updatedAt: string
  // Legacy fields for compatibility
  name: string
  specialization: string
  hospital: string
  phone: string
  totalScreenings: number
  joiningDate: string
  status: '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø' | '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø'
}

const DoctorManagement = ({ user, onBack }: DoctorManagementProps) => {
  const [searchTerm, setSearchTerm] = useState('')
  const [filterSpecialization, setFilterSpecialization] = useState('')
  const [showAddForm, setShowAddForm] = useState(false)
  const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null)

  // ESC key functionality for going back
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && !showAddForm && !selectedDoctor) {
        onBack()
      }
    }
    
    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [onBack, showAddForm, selectedDoctor])

  const mockDoctors: Doctor[] = [
    {
      id: 1,
      doctorName: '‡§°‡•â. ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      hospitalType: '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä',
      hospitalname: '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤, ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä',
      phoneNo: '9876543210',
      experience: 8,
      email: 'dr.priya@gov.in',
      password: '******',
      createdAt: '2020-03-15 10:30:00',
      updatedAt: '2025-01-29 15:45:00',
      // Legacy fields for compatibility
      name: '‡§°‡•â. ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      specialization: '‡§¨‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï',
      hospital: '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤, ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä',
      phone: '9876543210',
      totalScreenings: 450,
      joiningDate: '2020-03-15',
      status: '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø'
    },
    {
      id: 2,
      doctorName: '‡§°‡•â. ‡§Ö‡§Æ‡§ø‡§§ ‡§µ‡§∞‡•ç‡§Æ‡§æ',
      hospitalType: '‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡•Ä‡§Ø ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä',
      hospitalname: 'AIIMS, ‡§®‡§à ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä',
      phoneNo: '9876543211',
      experience: 12,
      email: 'dr.amit@aiims.gov.in',
      password: '******',
      createdAt: '2018-07-20 14:20:00',
      updatedAt: '2025-01-28 09:15:00',
      // Legacy fields for compatibility
      name: '‡§°‡•â. ‡§Ö‡§Æ‡§ø‡§§ ‡§µ‡§∞‡•ç‡§Æ‡§æ',
      specialization: '‡§π‡•É‡§¶‡§Ø ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
      hospital: 'AIIMS, ‡§®‡§à ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä',
      phone: '9876543211',
      totalScreenings: 380,
      joiningDate: '2018-07-20',
      status: '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø'
    },
    {
      id: 3,
      doctorName: '‡§°‡•â. ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ',
      hospitalType: '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä',
      hospitalname: '‡§∏‡§´‡§¶‡§∞‡§ú‡§Ç‡§ó ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤',
      phoneNo: '9876543212',
      experience: 15,
      email: 'dr.sunita@safdarjung.gov.in',
      password: '******',
      createdAt: '2015-11-10 11:45:00',
      updatedAt: '2025-01-27 16:30:00',
      // Legacy fields for compatibility
      name: '‡§°‡•â. ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ',
      specialization: '‡§¨‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï',
      hospital: '‡§∏‡§´‡§¶‡§∞‡§ú‡§Ç‡§ó ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤',
      phone: '9876543212',
      totalScreenings: 520,
      joiningDate: '2015-11-10',
      status: '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø'
    },
    {
      id: 4,
      doctorName: '‡§°‡•â. ‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
      hospitalType: '‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü',
      hospitalname: '‡§ó‡§µ‡§∞‡•ç‡§®‡§Æ‡•á‡§Ç‡§ü ‡§π‡•â‡§∏‡•ç‡§™‡§ø‡§ü‡§≤, ‡§ó‡•Å‡§°‡§º‡§ó‡§æ‡§Ç‡§µ',
      phoneNo: '9876543213',
      experience: 6,
      email: 'dr.rajesh@ggh.gov.in',
      password: '******',
      createdAt: '2022-01-05 08:15:00',
      updatedAt: '2025-01-26 12:20:00',
      // Legacy fields for compatibility
      name: '‡§°‡•â. ‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
      specialization: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï',
      hospital: '‡§ó‡§µ‡§∞‡•ç‡§®‡§Æ‡•á‡§Ç‡§ü ‡§π‡•â‡§∏‡•ç‡§™‡§ø‡§ü‡§≤, ‡§ó‡•Å‡§°‡§º‡§ó‡§æ‡§Ç‡§µ',
      phone: '9876543213',
      totalScreenings: 280,
      joiningDate: '2022-01-05',
      status: '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø'
    }
  ]

  const filteredDoctors = mockDoctors.filter(doctor => {
    const matchesSearch = doctor.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         doctor.hospital.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesSpecialization = !filterSpecialization || doctor.specialization === filterSpecialization
    return matchesSearch && matchesSpecialization
  })

  const handleAddDoctor = () => {
    setShowAddForm(true)
    setSelectedDoctor(null)
  }

  const handleEditDoctor = (doctor: Doctor) => {
    setSelectedDoctor(doctor)
    setShowAddForm(true)
  }

  const handleViewDoctor = (doctor: Doctor) => {
    setSelectedDoctor(doctor)
  }

  const handleDeleteDoctor = (doctor: Doctor) => {
    if (window.confirm(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ${doctor.name} ‡§ï‡•ã ‡§π‡§ü‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?`)) {
      // Delete functionality would be implemented here
      alert(`${doctor.name} ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§`)
    }
  }

  return (
    <div className="doctor-management">
      <div className="page-header">
        <div className="header-content">
          <div>
            <h1>‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®</h1>
            <p>‡§∏‡§≠‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® - {user.name}</p>
          </div>
        </div>
      </div>

      <div className="content-container">
        {/* Stats Cards */}
        <div className="stats-row">
          <div className="stat-card">
            <h3>‡§ï‡•Å‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï</h3>
            <p className="stat-number">{mockDoctors.length}</p>
            <span className="stat-icon">üë©‚Äç‚öïÔ∏è</span>
          </div>
          {/* <div className="stat-card">
            <h3>‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï</h3>
            <p className="stat-number">{mockDoctors.filter(d => d.status === '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø').length}</p>
            <span className="stat-icon">‚úÖ</span>
          </div> */}
          <div className="stat-card">
            <h3>‡§ï‡•Å‡§≤ ‡§ú‡§æ‡§Ç‡§ö</h3>
            <p className="stat-number">{mockDoctors.reduce((sum, doc) => sum + doc.totalScreenings, 0)}</p>
            <span className="stat-icon">üìä</span>
          </div>
          <div className="stat-card">
            <h3>‡§î‡§∏‡§§ ‡§Ö‡§®‡•Å‡§≠‡§µ</h3>
            <p className="stat-number">{Math.round(mockDoctors.reduce((sum, doc) => sum + doc.experience, 0) / mockDoctors.length)} ‡§µ‡§∞‡•ç‡§∑</p>
            <span className="stat-icon">üéì</span>
          </div>
        </div>

        {/* Search and Filter */}
        <div className="search-filter-section">
          <div className="search-box">
            <input
              type="text"
              placeholder="‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ñ‡•ã‡§ú‡•á‡§Ç..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <span className="search-icon">üîç</span>
          </div>
          
          {/* <div className="filter-section">
            <select
              value={filterSpecialization}
              onChange={(e) => setFilterSpecialization(e.target.value)}
            >
              <option value="">‡§∏‡§≠‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ‡§è‡§Ç</option>
              {specializations.map(spec => (
                <option key={spec} value={spec}>{spec}</option>
              ))}
            </select>
          </div> */}

          <button className="btn-primary" onClick={handleAddDoctor}>
            ‡§®‡§Ø‡§æ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
          </button>
        </div>

        {/* Doctors Table */}
        <div className="table-container">
          <table className="doctors-table">
            <thead>
              <tr>
                <th>‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï</th>
                <th>‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ</th>
                <th>‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤</th>
                <th>‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï</th>
                <th>‡§Ö‡§®‡•Å‡§≠‡§µ</th>
                <th>‡§à‡§Æ‡•á‡§≤</th>
                <th>‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à</th>
              </tr>
            </thead>
            <tbody>
              {filteredDoctors.map(doctor => (
                <tr key={doctor.id}>
                  <td>
                    <div className="doctor-info">
                      <div className="doctor-avatar">ü©∫</div>
                      <div>
                        <div className="doctor-name">{doctor.name}</div>
                        <div className="doctor-email">{doctor.email}</div>
                      </div>
                    </div>
                  </td>
                  <td>{doctor.specialization}</td>
                  <td>{doctor.hospital}</td>
                  <td>{doctor.phone}</td>
                  <td>{doctor.experience} ‡§µ‡§∞‡•ç‡§∑</td>
                  <td>{doctor.email}</td>
                  <td>
                    <div className="action-buttons">
                      <button 
                        className="btn-small btn-primary"
                        onClick={() => handleViewDoctor(doctor)}
                      >
                        ‡§¶‡•á‡§ñ‡•á‡§Ç
                      </button>
                      <button 
                        className="btn-small btn-danger"
                        onClick={() => handleDeleteDoctor(doctor)}
                      >
                        ‡§π‡§ü‡§æ‡§è‡§Ç
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {filteredDoctors.length === 0 && (
          <div className="no-results">
            <p>‡§ï‡•ã‡§à ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§</p>
          </div>
        )}
      </div>

      {/* Add/Edit Doctor Modal */}
      {showAddForm && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>{selectedDoctor ? '‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç' : '‡§®‡§Ø‡§æ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§ú‡•ã‡§°‡§º‡•á‡§Ç'}</h3>
              <button className="close-btn" onClick={() => setShowAddForm(false)}>√ó</button>
            </div>
            <div className="modal-body">
              <p>‡§Ø‡§π ‡§´‡•â‡§∞‡•ç‡§Æ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§ó‡§æ‡•§</p>
            </div>
          </div>
        </div>
      )}

      {/* Doctor Detail Modal */}
      {selectedDoctor && !showAddForm && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£</h3>
              <button className="close-btn" onClick={() => setSelectedDoctor(null)}>√ó</button>
            </div>
            <div className="modal-body">
              <div className="doctor-detail">
                <div className="detail-section">
                  <h4>‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h4>
                  <p><strong>ID:</strong> {selectedDoctor.id}</p>
                  <p><strong>‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ:</strong> {selectedDoctor.doctorName}</p>
                  <p><strong>‡§à‡§Æ‡•á‡§≤:</strong> {selectedDoctor.email}</p>
                  <p><strong>‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞:</strong> {selectedDoctor.phoneNo}</p>
                  <p><strong>‡§Ö‡§®‡•Å‡§≠‡§µ:</strong> {selectedDoctor.experience} ‡§µ‡§∞‡•ç‡§∑</p>
                </div>
                <div className="detail-section">
                  <h4>‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h4>
                  <p><strong>‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:</strong> {selectedDoctor.hospitalType}</p>
                  <p><strong>‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ:</strong> {selectedDoctor.hospitalname}</p>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button className="btn-secondary" onClick={() => setSelectedDoctor(null)}>
                ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default DoctorManagement
