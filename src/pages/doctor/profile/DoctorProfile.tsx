import { useState } from 'react'
import { User } from '../../../App'
import './DoctorProfile.css'

interface DoctorProfileProps {
  user: User
  onBack: () => void
}

interface DoctorDetails {
  personalInfo: {
    name: string
    email: string
    phone: string
    dateOfBirth: string
    gender: '‡§™‡•Å‡§∞‡•Å‡§∑' | '‡§Æ‡§π‡§ø‡§≤‡§æ'
    address: string
  }
  professionalInfo: {
    specialization: string
    medicalLicense: string
    hospital: string
    department: string
    experience: number
    qualification: string
    joiningDate: string
  }
  statistics: {
    totalScreenings: number
    thisMonthScreenings: number
    positiveCases: number
    pendingReports: number
  }
  preferences: {
    notifications: boolean
    emailAlerts: boolean
    language: '‡§π‡§ø‡§Ç‡§¶‡•Ä' | '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä'
    theme: 'light' | 'dark'
  }
}

const DoctorProfile = ({ user, onBack }: DoctorProfileProps) => {
  const [activeTab, setActiveTab] = useState('personal')
  const [isEditing, setIsEditing] = useState(false)
  const [doctorDetails, setDoctorDetails] = useState<DoctorDetails>({
    personalInfo: {
      name: user.name || '‡§°‡•â. ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      email: user.email || 'dr.priya@gov.in',
      phone: '9876543210',
      dateOfBirth: '1985-06-15',
      gender: '‡§Æ‡§π‡§ø‡§≤‡§æ',
      address: '‡§∏‡•á‡§ï‡•ç‡§ü‡§∞ 15, ‡§ó‡•Å‡§°‡§º‡§ó‡§æ‡§Ç‡§µ, ‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ - 122001'
    },
    professionalInfo: {
      specialization: '‡§¨‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï',
      medicalLicense: 'MCI12345678',
      hospital: '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤, ‡§ó‡•Å‡§°‡§º‡§ó‡§æ‡§Ç‡§µ',
      department: '‡§¨‡§æ‡§≤ ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§≠‡§æ‡§ó',
      experience: 8,
      qualification: 'MBBS, MD (Pediatrics)',
      joiningDate: '2020-03-15'
    },
    statistics: {
      totalScreenings: 450,
      thisMonthScreenings: 35,
      positiveCases: 28,
      pendingReports: 5
    },
    preferences: {
      notifications: true,
      emailAlerts: true,
      language: '‡§π‡§ø‡§Ç‡§¶‡•Ä',
      theme: 'light'
    }
  })

  const [editForm, setEditForm] = useState(doctorDetails)

  const handleInputChange = (section: keyof DoctorDetails, field: string, value: any) => {
    setEditForm(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }))
  }

  const handleSave = () => {
    setDoctorDetails(editForm)
    setIsEditing(false)
    alert('‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã ‡§ó‡§à!')
  }

  const handleCancel = () => {
    setEditForm(doctorDetails)
    setIsEditing(false)
  }

  const tabItems = [
    { id: 'personal', label: '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä', icon: 'üë§' },
    { id: 'professional', label: '‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä', icon: 'üè•' },
    { id: 'statistics', label: '‡§∏‡§æ‡§Ç‡§ñ‡•ç‡§Ø‡§ø‡§ï‡•Ä', icon: 'üìä' },
    { id: 'preferences', label: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏', icon: '‚öôÔ∏è' }
  ]

  const renderPersonalInfo = () => (
    <div className="profile-section">
      <div className="section-header">
        <h3>‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h3>
        {!isEditing && (
          <button className="btn-edit" onClick={() => setIsEditing(true)}>
            ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
          </button>
        )}
      </div>

      <div className="info-grid">
        <div className="info-group">
          <label>‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ</label>
          {isEditing ? (
            <input
              type="text"
              value={editForm.personalInfo.name}
              onChange={(e) => handleInputChange('personalInfo', 'name', e.target.value)}
            />
          ) : (
            <p>{doctorDetails.personalInfo.name}</p>
          )}
        </div>

        <div className="info-group">
          <label>‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ</label>
          {isEditing ? (
            <input
              type="email"
              value={editForm.personalInfo.email}
              onChange={(e) => handleInputChange('personalInfo', 'email', e.target.value)}
            />
          ) : (
            <p>{doctorDetails.personalInfo.email}</p>
          )}
        </div>

        <div className="info-group">
          <label>‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞</label>
          {isEditing ? (
            <input
              type="tel"
              value={editForm.personalInfo.phone}
              onChange={(e) => handleInputChange('personalInfo', 'phone', e.target.value)}
            />
          ) : (
            <p>{doctorDetails.personalInfo.phone}</p>
          )}
        </div>

        <div className="info-group">
          <label>‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø</label>
          {isEditing ? (
            <input
              type="date"
              value={editForm.personalInfo.dateOfBirth}
              onChange={(e) => handleInputChange('personalInfo', 'dateOfBirth', e.target.value)}
            />
          ) : (
            <p>{new Date(doctorDetails.personalInfo.dateOfBirth).toLocaleDateString('hi-IN')}</p>
          )}
        </div>

        <div className="info-group">
          <label>‡§≤‡§ø‡§Ç‡§ó</label>
          {isEditing ? (
            <select
              value={editForm.personalInfo.gender}
              onChange={(e) => handleInputChange('personalInfo', 'gender', e.target.value)}
            >
              <option value="‡§™‡•Å‡§∞‡•Å‡§∑">‡§™‡•Å‡§∞‡•Å‡§∑</option>
              <option value="‡§Æ‡§π‡§ø‡§≤‡§æ">‡§Æ‡§π‡§ø‡§≤‡§æ</option>
            </select>
          ) : (
            <p>{doctorDetails.personalInfo.gender}</p>
          )}
        </div>

        <div className="info-group full-width">
          <label>‡§™‡§§‡§æ</label>
          {isEditing ? (
            <textarea
              value={editForm.personalInfo.address}
              onChange={(e) => handleInputChange('personalInfo', 'address', e.target.value)}
              rows={3}
            />
          ) : (
            <p>{doctorDetails.personalInfo.address}</p>
          )}
        </div>
      </div>

      {isEditing && (
        <div className="edit-actions">
          <button className="btn-primary" onClick={handleSave}>
            ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
          </button>
          <button className="btn-secondary" onClick={handleCancel}>
            ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
          </button>
        </div>
      )}
    </div>
  )

  const renderProfessionalInfo = () => (
    <div className="profile-section">
      <div className="section-header">
        <h3>‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h3>
      </div>

      <div className="info-grid">
        <div className="info-group">
          <label>‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ</label>
          <p>{doctorDetails.professionalInfo.specialization}</p>
        </div>

        <div className="info-group">
          <label>‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏</label>
          <p>{doctorDetails.professionalInfo.medicalLicense}</p>
        </div>

        <div className="info-group">
          <label>‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤</label>
          <p>{doctorDetails.professionalInfo.hospital}</p>
        </div>

        <div className="info-group">
          <label>‡§µ‡§ø‡§≠‡§æ‡§ó</label>
          <p>{doctorDetails.professionalInfo.department}</p>
        </div>

        <div className="info-group">
          <label>‡§Ö‡§®‡•Å‡§≠‡§µ</label>
          <p>{doctorDetails.professionalInfo.experience} ‡§µ‡§∞‡•ç‡§∑</p>
        </div>

        <div className="info-group">
          <label>‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ</label>
          <p>{doctorDetails.professionalInfo.qualification}</p>
        </div>

        <div className="info-group">
          <label>‡§ú‡•ç‡§µ‡§æ‡§á‡§®‡§ø‡§Ç‡§ó ‡§§‡§æ‡§∞‡•Ä‡§ñ</label>
          <p>{new Date(doctorDetails.professionalInfo.joiningDate).toLocaleDateString('hi-IN')}</p>
        </div>
      </div>
    </div>
  )

  const renderStatistics = () => (
    <div className="profile-section">
      <div className="section-header">
        <h3>‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡§æ‡§Ç‡§ñ‡•ç‡§Ø‡§ø‡§ï‡•Ä</h3>
      </div>

      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">üë∂</div>
          <div className="stat-content">
            <h4>‡§ï‡•Å‡§≤ ‡§ú‡§æ‡§Ç‡§ö</h4>
            <p className="stat-number">{doctorDetails.statistics.totalScreenings}</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">üìÖ</div>
          <div className="stat-content">
            <h4>‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á</h4>
            <p className="stat-number">{doctorDetails.statistics.thisMonthScreenings}</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">‚ö†Ô∏è</div>
          <div className="stat-content">
            <h4>‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§Æ‡§æ‡§Æ‡§≤‡•á</h4>
            <p className="stat-number">{doctorDetails.statistics.positiveCases}</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">‚è≥</div>
          <div className="stat-content">
            <h4>‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü</h4>
            <p className="stat-number">{doctorDetails.statistics.pendingReports}</p>
          </div>
        </div>
      </div>

      <div className="performance-chart">
        <h4>‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®</h4>
        <p>‡§™‡§ø‡§õ‡§≤‡•á 6 ‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ï‡•Ä ‡§ó‡§à ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£:</p>
        <div className="chart-placeholder">
          <div className="chart-bar" style={{ height: '60%' }}>‡§ú‡§®</div>
          <div className="chart-bar" style={{ height: '75%' }}>‡§´‡§∞</div>
          <div className="chart-bar" style={{ height: '40%' }}>‡§Æ‡§æ‡§∞</div>
          <div className="chart-bar" style={{ height: '85%' }}>‡§Ö‡§™‡•ç‡§∞</div>
          <div className="chart-bar" style={{ height: '70%' }}>‡§Æ‡§à</div>
          <div className="chart-bar" style={{ height: '90%' }}>‡§ú‡•Ç‡§®</div>
        </div>
      </div>
    </div>
  )

  const renderPreferences = () => (
    <div className="profile-section">
      <div className="section-header">
        <h3>‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç</h3>
      </div>

      <div className="preferences-grid">
        <div className="preference-group">
          <h4>‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏</h4>
          
          <div className="preference-item">
            <label className="switch-label">
              <span>‡§™‡•Å‡§∂ ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§®</span>
              <div className="switch">
                <input
                  type="checkbox"
                  checked={doctorDetails.preferences.notifications}
                  onChange={(e) => handleInputChange('preferences', 'notifications', e.target.checked)}
                />
                <span className="slider"></span>
              </div>
            </label>
          </div>

          <div className="preference-item">
            <label className="switch-label">
              <span>‡§à‡§Æ‡•á‡§≤ ‡§Ö‡§≤‡§∞‡•ç‡§ü</span>
              <div className="switch">
                <input
                  type="checkbox"
                  checked={doctorDetails.preferences.emailAlerts}
                  onChange={(e) => handleInputChange('preferences', 'emailAlerts', e.target.checked)}
                />
                <span className="slider"></span>
              </div>
            </label>
          </div>
        </div>

        <div className="preference-group">
          <h4>‡§°‡§ø‡§∏‡•ç‡§™‡•ç‡§≤‡•á ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏</h4>
          
          <div className="preference-item">
            <label>‡§≠‡§æ‡§∑‡§æ</label>
            <select
              value={doctorDetails.preferences.language}
              onChange={(e) => handleInputChange('preferences', 'language', e.target.value)}
            >
              <option value="‡§π‡§ø‡§Ç‡§¶‡•Ä">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
              <option value="‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä">‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä</option>
            </select>
          </div>

          <div className="preference-item">
            <label>‡§•‡•Ä‡§Æ</label>
            <select
              value={doctorDetails.preferences.theme}
              onChange={(e) => handleInputChange('preferences', 'theme', e.target.value)}
            >
              <option value="light">‡§π‡§≤‡•ç‡§ï‡§æ</option>
              <option value="dark">‡§ó‡§π‡§∞‡§æ</option>
            </select>
          </div>
        </div>
      </div>

      <div className="danger-zone">
        <h4>‡§ñ‡§æ‡§§‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®</h4>
        <div className="danger-actions">
          <button className="btn-danger">‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¨‡§¶‡§≤‡•á‡§Ç</button>
          <button className="btn-danger">‡§ñ‡§æ‡§§‡§æ ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç</button>
        </div>
      </div>
    </div>
  )

  return (
    <div className="doctor-profile">
      <div className="page-header">
        <div className="header-content">
          <button className="back-btn" onClick={onBack}>
            ‚Üê ‡§µ‡§æ‡§™‡§∏
          </button>
          <div className="header-info">
            <div className="doctor-avatar-large">üë©‚Äç‚öïÔ∏è</div>
            <div>
              <h1>{doctorDetails.personalInfo.name}</h1>
              <p>{doctorDetails.professionalInfo.specialization}</p>
              <p>{doctorDetails.professionalInfo.hospital}</p>
            </div>
          </div>
        </div>
      </div>

      <div className="content-container">
        <div className="profile-tabs">
          {tabItems.map(tab => (
            <button
              key={tab.id}
              className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <span className="tab-icon">{tab.icon}</span>
              <span className="tab-label">{tab.label}</span>
            </button>
          ))}
        </div>

        <div className="profile-content">
          {activeTab === 'personal' && renderPersonalInfo()}
          {activeTab === 'professional' && renderProfessionalInfo()}
          {activeTab === 'statistics' && renderStatistics()}
          {activeTab === 'preferences' && renderPreferences()}
        </div>
      </div>
    </div>
  )
}

export default DoctorProfile
